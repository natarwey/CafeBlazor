@page "/orders"
@using CafeBlazor.ApiRequest.Model
@using CafeBlazor.ApiRequest.Services
@inject ApiRequestService ApiRequestService
@inject IJSRuntime JSRuntime
@using System.Text.Json

<h3>Orders</h3>

@if (orders == null)
{
    <p>Loading...</p>
}
else
{
    <p>Total orders: @orders.Count</p> <!-- Добавьте эту строку для отладки -->
    @if (!orders.Any())
    {
        <p>No orders found</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Table Number</th>
                    <th>Waiter ID</th>
                    <th>Order Date</th>
                    <th>Total Amount</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in orders)
                {
                    <tr>
                        <td>@order.Id</td>
                        <td>@order.TableNumber</td>
                        <td>@order.WaiterId</td>
                        <td>@order.OrderDate.ToShortDateString()</td>
                        <td>@order.TotalAmount</td>
                        <td>
                            <a href="/edit-order/@order.Id">Edit</a> |
                            <button @onclick="() => DeleteOrder(order.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    //private List<Order> orders = new();
    private bool isLoading = true;
    private string? errorMessage;
    private List<Order>? orders;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            orders = await ApiRequestService.GetOrdersAsync();
            Console.WriteLine($"Received {orders?.Count} orders"); // Отладочный вывод
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex}");
        }
    }

    private async Task LoadOrders()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            orders = await ApiRequestService.GetOrdersAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Detailed error: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task Reload() => await LoadOrders();

    private async Task DeleteOrder(int id)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>(
                "confirm",
                new object[] { "Are you sure you want to delete this order?" }
            );

            if (confirmed)
            {
                await ApiRequestService.DeleteOrderAsync(id);
                orders = orders.Where(o => o.Id != id).ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting order: {ex.Message}";
        }
    }
}